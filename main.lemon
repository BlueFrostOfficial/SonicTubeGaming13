
// defines
define u8 char.state.SPRINGTWIRL	=  0x31

//-------------------------------------------------------//
// Spring Code          				                 //
//-------------------------------------------------------//

// Up
//# address-hook(0x022f98) end(0x02304a)
function void SpringVertical.ApplyToCharacter()
{
	if global.zone == 0x05 && Mods.isModActive("Ice Cap Zone Redesigned")
	{
		SpringVertical.ApplyToCharacter.ICZR()
		return
	}
	else if ((objA0.subtype2c & 0x01) == 0 || competition_mode.active)
	{
		base.SpringVertical.ApplyToCharacter()
		return
	}
	
	objA0.state.both = 0x100
	if (global.inv_gravity)
		objA1.position.y.u16 -= 8
	else
		objA1.position.y.u16 += 8

	u8[A1 + 0x05] = 2
	objA1.velocity.y = u16[A0 + 0x30]
	objA1.flags2a |= char.flag.IN_AIR
	objA1.flags2a &= ~char.flag.ON_OBJECT
	u8[A1 + 0x3d] = 0
	u8[A1 + 0x40] = 0

	if (objA0.subtype2c & 0x80)
		objA1.velocity.x = 0
	
	objA1.state = (objA0.subtype2c & 0x01) ? char.state.SPRINGTWIRL : char.state.STRAIGHTJUMP

	D0.u8 = objA0.subtype2c & 0x0c
	if (D0.u8 == 0x04)
	{
		u8[A1 + 0x46] = 0x0c
		u8[A1 + 0x47] = 0x0d
	}
	if (D0.u8 == 0x08)
	{
		u8[A1 + 0x46] = 0x0e
		u8[A1 + 0x47] = 0x0f
	}

	playSound(SFX_SPRING)
}

function void SpringVertical.ApplyToCharacter.ICZR()
{
	if objA0.value39 == 2 // Don't update if broken
	{
		return
	}

	objA0.state.both = 0x100
	if (global.inv_gravity)
		objA1.position.y.u16 -= 8
	else
		objA1.position.y.u16 += 8

	u8[A1 + 0x05] = 2
	objA1.velocity.y = u16[A0 + 0x30]
	objA1.flags2a |= char.flag.IN_AIR
	objA1.flags2a &= ~char.flag.ON_OBJECT
	u8[A1 + 0x3d] = 0
	u8[A1 + 0x40] = 0

	if (objA0.subtype2c & 0x80)
	{
		objA1.velocity.x = 0
	}
	if (objA0.subtype2c & 0x01)
	{
		if objA0.value39 >= 1					// Ice Springs let you stay in rolling state like in Mania. Probably so you can keep destroying ice blocks
		{
			objA1.state = char.state.ROLLING
		}
		else
		{
			objA1.state = 0x31
		}
	}
	else
	{
		objA1.state = char.state.STRAIGHTJUMP
	}

	D0.u8 = objA0.subtype2c & 0x0c
	if (D0.u8 == 0x04)
	{
		u8[A1 + 0x46] = 0x0c
		u8[A1 + 0x47] = 0x0d
	}
	if (D0.u8 == 0x08)
	{
		u8[A1 + 0x46] = 0x0e
		u8[A1 + 0x47] = 0x0f
	}

	playSound(SFX_SPRING)

	if objA0.value39 >= 1
	{
		objA0.value3a = 0
		objA0.value39 = 2 		// This Ice Spring is now broken.
	}
	
}


// Diagonal Upwards
//# address-hook(0x0234e6) end(0x0235cc)
function void fn0234e6()
{
	if ((objA0.subtype2c & 0x01) == 0 || competition_mode.active)
	{
		base.fn0234e6()
		return
	}
	
	if ((objA0.flags2a & 0x01) == 0)
	{
		D0.u16 = objA0.position.x.u16 - 4
		if (D0.u16 >= objA1.position.x.u16)
			return
	}
	else
	{
		D0.u16 = objA0.position.x.u16 + 4
		if (D0.u16 < objA1.position.x.u16)
			return
	}

	objA0.state.both = 0x0500
	objA1.velocity.y = u16[A0 + 0x30]
	objA1.position.y.u16 += 6
	if ((objA0.flags2a & 0x01) == 0)
	{
		objA1.flags2a &= ~char.flag.FACING_LEFT
		objA1.position.x.u16 -= 6
		objA1.velocity.x = -s16[A0 + 0x30]
	}
	else
	{
		objA1.flags2a |= char.flag.FACING_LEFT
		objA1.position.x.u16 += 6
		objA1.velocity.x = s16[A0 + 0x30]
	}

	u8[A1 + 0x05] = 0x02
	objA1.state = (objA0.subtype2c & 0x01) ? char.state.SPRINGTWIRL : char.state.STRAIGHTJUMP
	objA1.flags2a |= char.flag.IN_AIR
	objA1.flags2a &= ~char.flag.ON_OBJECT
	u8[A1 + 0x40] = 0

	D0.u8 = objA0.subtype2c & 0x0c
	if (D0.u8 == 0x04)
	{
		u8[A1 + 0x46] = 0x0c
		u8[A1 + 0x47] = 0x0d
	}
	if (D0.u8 == 0x08)
	{
		u8[A1 + 0x46] = 0x0e
		u8[A1 + 0x47] = 0x0f
	}

	playSound(SFX_SPRING)
}

// Animation -------------------------------------------------------

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
	if (char.state == char.state.SPRINGTWIRL)
		UpdateAnimSpringTwirl()
	else
		base.UpdateSonicAnimation()
}

//# address-hook(0x015862) end(0x015aae)
function void UpdateTailsAnimation()
{
	if (char.state == char.state.SPRINGTWIRL)
		UpdateAnimSpringTwirl()
	else
		base.UpdateTailsAnimation()
}

//# address-hook(0x017d30) end(0x017ef0)
function void UpdateKnucklesAnimation()
{
	if (char.state == char.state.SPRINGTWIRL)
		UpdateAnimSpringTwirl()
	else
		base.UpdateKnucklesAnimation()
}

function void UpdateAnimSpringTwirl()
{
	UpdateAnimSpringTwirl_FlipFlags()
	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}
	
	char.animation.sprite = 0x8e
	--char.animation.timer
	if (s8(char.animation.timer) < 8)
	{
		char.animation.timer = 8
		updateSonicAnimation_shared()
	}
		
	if (char.velocity.y >= 0)
	{
		char.state = char.state.RUNNING
		char.state.former = char.state
		char.animation.frame = 0
		updateSonicAnimationRunning()
	}
}

function void UpdateAnimSpringTwirl_FlipFlags()
{
	u8 lmao = char.flags & char.flag.FACING_LEFT
	char.render_flags = (char.render_flags & 0xfc) | lmao
}

// This function is here only for script mods that want to change or extend the character sprites
function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSprite)
{
	// Custom Animations
	// I don't even need to base this but it's better for compatability reasons
	//u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u64 returnkey = 0
	
	if (char.state == char.state.SPRINGTWIRL) // the animation
	{
		u64 spr = stringformat("%s%s", LST_get_char_name(character), "_springtwirl_%x")
		returnkey = stringformat(spr, char.animation.frame % LST_getFrameCount(spr))
	}

	if Renderer.hasCustomSprite(returnkey)
		return returnkey
	// Default implementation: No key set
	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}

function s64 LST_getFrameCount(u64 namekey)
{
	// this is used once, and never again
	s64 frames = 0
	while(true)
	{
		if(Renderer.hasCustomSprite(stringformat(namekey, frames)))
			frames++
		else
			return frames
	}
	return 0
}

function u64 LST_get_char_name(u8 character)
{
	return (character == CHARACTER_TAILS) ? "tails" : (character == CHARACTER_KNUCKLES) ? "knuckles" : (super.active && character == CHARACTER_SONIC) ? "supersonic" : "sonic"
}

function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	if (char.state != char.state.SPRINGTWIRL)
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)

	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	// Check only needed for Tails' tails
	if (variant == 2)
	{
		// No smooth rotation in Slot Machine
		if (global.zone == 0x15)
			return false

		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && (u8[characterAddress + 0x34] & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			return true
		}

		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			return true
		}

		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0

	if (variant < 2)
	{
		if (character == CHARACTER_SONIC && animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (char.state == char.state.SONIC_DROPDASH)
			{
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + ((level.framecounter >> 1) & 0x01)
			}
			else if (!super.active && animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				if (sonic.fastrunanim.timer > 0)
				{
					animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)

					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
					{
						angle = (animationSprite - 0x21) / 4 * 0xe0
						if (char.flags & char.flag.FACING_LEFT)
							angle = -angle
						animationSprite = 0x21 + (animationSprite - 0x21) % 4
					}
				}
			}
		}

		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				animationSprite = 0x78
				rotationMode = 2
			}
			else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
			{
				animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				rotationMode = 1
			}
			else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			{
				// Only for DDZ
				rotationMode = 1
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}
		key = Standalone.getModdedAnimationSpriteKey(character, animationSprite)
		
		timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			if (animationSpriteEx >= 0x100)
			{
				// Special handling for Drop Dash & Super Peel-Out
				if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
				{
					key = stringformat("sonic_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
				}
				else
				{
					key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
					//System.writeDisplayLine(stringformat("key = %s", char.rotation.x % 8))
				}
			}
		
			if (character == CHARACTER_SONIC)
			{
				key = stringformat(super.active ? "character_supersonic_0x%02x" : "character_sonic_0x%02x", animationSprite)
			}
			else if (character == CHARACTER_TAILS)
			{
				key = stringformat("character_tails_0x%02x", animationSprite)
			}
			else if (character == CHARACTER_KNUCKLES)
			{
				key = stringformat("character_knuckles_0x%02x", animationSprite)
			}

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
				//key = "character_kart_sonic_idle_0"
				//System.writeDisplayLine(stringformat("key = %s", key))
			}
		}
	}
	else
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Tails' tails
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])

				flags = 0
				if (objA0.flags2a & 0x01)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}

		key = stringformat("character_tails_tails_0x%02x", animationSprite)
		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	bool usefunnies
	usefunnies = false
	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
		if (Renderer.hasCustomSprite(key)) && usefunnies
			System.writeDisplayLine(key)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true
}
